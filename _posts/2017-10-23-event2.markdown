---
layout:     post
title:      "面试常问之js的那些小事之事件（二）"
subtitle:   "\"事件流\""
date:       2017-10-23
author:     "Alan"
header-img: "img/home-bg-geek.jpg"
catalog: true
tags:
    - 前端
    - js
---

> live like youself. 


## 前言

上一篇小编把事件的基础绑定和移除讲了一些，接下来的这篇，小编要更深入的总结一下有关于事件流的知识点（事件冒泡和事件委托），接下来就和小编一起来了解一下事件流以及它们的应用吧

### 一、什么是事件流

事件流具体是什么呢？事件发生时会在元素节点与它根节点（一般会到document）之间按照特定的顺序传播，路径所经过的所有节点都会收到该事件，这个传播过程即DOM事件流。

其实简单来讲，事件流描述的其实是从页面中接收事件的顺序。

### 二、两种事件流模型

事件传播的顺序对应浏览器的两种事件流模型：捕获型事件流和冒泡型事件流

#### 1.冒泡型事件流模型

事件按照从最特定的事件目标到最不特定的事件目标的顺序触发。即从DOM树的叶子到根。
简单来讲就是，从当前最内层的元素一直向上触发，直到document。

需要注意的是，不同的浏览器对事件冒泡实现是不一致的：

IE5.5及更早版本中事件冒泡会跳过<html>元素(从body直接跳到document)。

IE9、Firefox、Chrome、和Safari则将事件一直冒泡到window对象。

#### 2.捕获型事件流模型

事件从最不特定的对象开始触发，然后到最特定的事件目标的顺序触发。即从DOM树的根到叶子。简单来讲其实就是不太具体的节点应该更早接收到事件，而最具体的节点最后接收到事件。
然而在使用事件捕获时我们要注意：

a.IE9、Firefox、Chrome、Opera、和Safari都支持事件捕获。尽管DOM标准要求事件应该从document对象开始传播，但这些浏览器都是从window对象开始捕获事件的。

b.由于老版本浏览器不支持，很少有人使用事件捕获。建议使用事件冒泡。

### 三、Dom标准的事件流是什么样子的呢？
![事件流](/img/event.png)

DOM标准采用捕获+冒泡。两种事件流都会触发DOM的所有对象，从document对象开始，也在document对象结束。

DOM标准规定事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段(绑定事件的第三个参数可以修改哦)。

* 事件捕获阶段：实际目标（<div>）在捕获阶段不会接收事件。也就是在捕获阶段，事件从document到<html>再到<body>就停止了。如图片中为1~3.
* 处于目标阶段：事件在<div>上发生并处理。但是事件处理会被看成是冒泡阶段的一部分。
* 冒泡阶段：事件又传播回文档。

需要注意的是：

a.尽管“DOM2级事件”标准规范明确规定事件捕获阶段不会涉及事件目标，但是在IE9、Safari、Chrome、Firefox和Opera9.5及更高版本都会在捕获阶段触发事件对象上的事件。结果，就是有两次机会在目标对象上面操作事件。

b.并非所有的事件都会经过冒泡阶段 。所有的事件都要经过捕获阶段和处于目标阶段，但是有些事件会跳过冒泡阶段：如，获得输入焦点的focus事件和失去输入焦点的blur事件。

### 四、事件流的典型应用：事件代理（事件委托）
什么叫事件代理或者事件委托呢？JavaScript高级程序设计里说：事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件，让我们举个例子吧（部分摘抄于JavaScript高级程序设计）

```
<ul id="myLinks">
    <li id="goSomewhere">Go somewhere</li>
    <li id="doSomething">Do something</li>
    <li id="sayHi">Say hi</li>
</ul>
```

当我们想给上面的li绑定事件，我们应该怎么做呢？
```
var item1 = document.getElementById("goSomewhere");
var item2 = document.getElementById("doSomething");
var item3 = document.getElementById("sayHi");
item1.addEventListener("click", function(event){
    location.href = "http://www.wrox.com";
}, false);
item2.addEventListener("click", function(event){
    document.title = "I changed the document's title";
});
item3.addEventListener("click", function(event){
    alert("hi");
}, false);
```
那如果li是10000个呢？10万呢？这样肯定不行了，我们该怎样解决呢？让我们回想一下标准事件是怎么触发的吗？如下图，就是我们的事件目标的触发事件总和冒泡到上一级别，那么我们是不是可以用一个父元素事件来解决所有子元素事件呢？
![事件流](/img/event.png)
那么我们就可以这么做了
```
var list = document.getElementById("myLinks");
list.addEventListener(list, "click", function(event){
        event=event||window.event;
        var target = event.target;
        switch(target.id){
            case "doSomething":
                document.title = "I changed the document's title";
                break;
            case "goSomewhere":
                location.href = "http://www.wrox.com";
                break;
            case "sayHi": 9alert("hi");
                break;
        }
});
```
那如果我们在ul里加入一个子元素span呢？我并不希望也触发这个事件呢？怎么办呢？
```
<ul id="myLinks">
    <li id="goSomewhere">Go somewhere</li>
    <li id="doSomething">Do something</li>
    <li id="sayHi">Say hi</li>
    <span id=“nothing">I don’t want do anything</span>
</ul>
```
两种解决办法

a.给span元素绑定一个事件阻止冒泡
```
var span = document.getElementById("nothing”);
list.addEventListener(list, "click", function(event){
    window.event? window.event.cancelBubble = true : e.stopPropagation();
});
```
b.在ul上验证元素类型
```
var list = document.getElementById("myLinks");
list.addEventListener(list, "click", function(event){
       event=event||window.event;
       var target=e.target||e.srcElement;
       if(target.nodeName.toLowerCase()==="li"){
            switch(target.id){
                case "doSomething":
                    document.title = "I changed the document's title";
                    break;
                case "goSomewhere":
                    location.href = "http://www.wrox.com";
                    break;
                case "sayHi": 9alert("hi");
                    break;
            }
       }
});
```

## 后记

这篇博客写到这就结束了，这篇主要是讲了小编我对事件流的认识，当然也参考了很多前辈的博客和文档以及相关书籍，还算比较全面的理解吧，接下来的一篇应该是事件的最后一篇了，明天会整理发出来，在这里小编还是要像往常一样唠叨几句，你在面试的时候会不会有这种感觉呢？其实有很多东西，你是会的，你也看见过，但为什么面试的时候答不出来呢？其实答案真的很简单，你缺了一个整理的过程，这也是小编我为什么坚持写博客的原因，其实有点小后悔，如果面试前就整理一下，会不会把美团的面试小哥虐哭呢？哈哈