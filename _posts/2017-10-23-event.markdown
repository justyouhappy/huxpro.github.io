---
layout:     post
title:      "面试常问之js的那些小事之事件（一）"
subtitle:   "\"事件基础详解\""
date:       2017-10-23
author:     "Alan"
header-img: "img/post-bg-alitrip.jpg"
catalog: true
tags:
    - 前端
    - js
---

> live like youself. 


## 前言

就在昨天（因为比较懒，隔了很多天才发出来），小编参加了美团大大在哈尔滨的面试，面试小哥除了从react源码的理解上狠狠的虐了小编之外，就连小编天天打交道的事件的基础知识上也狠狠的虐了一把，小编深感痛心啊，所以痛定思痛之后，就决定好好的看一下事件处理的相关知识，所以也就有了下面的这篇博客

### 一、什么是事件

事件是一个浏览器与用户交互的重要内容，其实也应该是核心内容，那么事件到底是什么呢？

我们都知道在JavaScript程序中，JavaScript使我们有能力创建动态页面。而事件则是可以被 JavaScript 侦测到的行为。

网页中的每个元素都可以产生某些可以触发 JavaScript 函数的事件。比方说，我们可以在用户点击某按钮时产生一个Click 事件来触发某个函数。这种模式被称为异步事件驱动编程模型。

那啰嗦了这么多事件到底是什么呢？用一句话来说，事件就是浏览器能通知我们的代码，现在发生了什么，触发我们预先写好或者浏览器自带的默认处理方式，这就是事件

### 二、事件的类型

知道了事件是什么，那么我们就应该明确另一个概念事件的类型到底有什么，他指的是什么？

其实事件类型就是一个用来说明发生什么类型事件的字符串。比如：’mousemove’表示用户移动鼠标，而’keydown’表示某个键盘被按下等等。

这里就不对事件类型详细的讲解了~（小编太懒，文档太多，亲们自己查一下就好了）

### 三、事件目标
知道了事件是什么以及事件类型的概念，那么我们就会产生了疑问，它的目标是什么呢？

其实事件的目标就是指发生的事件或与之相关的对象！

当我们定义一个事件的时候，必须指明是谁发生事件，发生的事件它的类型是什么！

而这个谁就是事件目标


### 四、如何使用事件呢？

如何使用事件，这就涉及到了事件绑定的方法~总体可以描述为找到事件的目标，定义事件的类型，已经我们自己编写的事件发生时执行的回调

事件绑定总体来说是有两种方法的：

#### 1.句柄绑定监听函数的方法,话不多说上代码先
```
var elem = document.getElementById('ID’);//获取事件的目标
function alertEvent( event ){
  alert(event.type + 'this.innerHTML');
};//定义事件回调
elem.onclick = alertEvent;//定义事件类型，并且用句柄的方式绑定事件
```
但是小编是不建议这么绑定事件的，原因有两点:
```
a、一个元素的一个事件句柄只能注册一个函数，如果重复注册，会产生覆盖
b、句柄绑定方法只会在事件冒泡中运行。（冒泡？不懂的话，在下一篇，小编会有解释）
```
#### 2.addEventListener || attachEvent 使用函数对他们绑定

这两种方法都是浏览器默认的绑定事件的方法，addEventListener，除了对ie8及以下的ie浏览器是不兼容之外，是比较完美的，而attachEvent则是ie提供的绑定事件方法，而在这里也要说一下两者的区别，在句柄和addEventListener里this都是指向事件目标的，而attachEvent的this却是指向的window。
具体使用
```
var elem = document.getElementById('ID’);//获取事件的目标
function alertEvent( event ){
  alert(event.type + 'this.innerHTML');
};//定义事件回调
elem.addEventListener(‘click’, alertEvent, false);
elem.attachEvent(‘onclick’, alertEvent);
```
### 五、关于addEventListener有一些需要注意的地方(参考mdn)
1.语法
```
elem.addEventListener(type, listener[, options]);
elem.addEventListener(type, listener[, useCapture]);
elem.addEventListener(type, listener[, useCapture, wantsUntrusted  ]);
```
#### type
表示监听事件类型的字符串。
#### listener 
当所监听的事件类型触发时，会接收到一个事件通知（实现了 Event 接口的对象）对象。
必须是一个实现了 EventListener 接口的对象，或者是一个函数，我们主要使用的是函数（事件回调）
#### options
可选 一个指定有关 listener 属性的可选参数对象。可用的选项如下：
* capture: Boolean
表示 listener 是否会在该类型的事件捕获阶段传播到该 EventTarget 时触发。
* once: Boolean
表示 listener 是否在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。
* passive: Boolean
表示 listener 是否永远不会调用 preventDefault() （取消默认事件）。
如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。
* mozSystemGroup: 只能在 XBL 或者是 Firefox' chrome 使用，这是个 Boolean，表示 listener 被添加到 system group。

#### useCapture 
可选Boolean，是指在DOM树中，注册了该listener的元素，是否会先于它下方的任何事件目标，接收到该事件。
沿着DOM树向上冒泡的事件不会触发被指定为use capture（也就是设为true）的listener。
当一个元素嵌套了另一个元素，两个元素都对同一个事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种
不同的事件传播方式。
事件传播模式决定了元素以哪个顺序接收事件。
如果没有指定， useCapture 默认为 false 。

### 六、如何将事件移除呢？

每种绑定方式都有一个自己的移除方式

#### 1.句柄怎么移除呢？

```
elem.onclick = null;//好了~
```

#### 2.addEventListener || attachEvent 怎么移除呢
两个函数有两种不同的移除方式

1.addEventListener的移除方式

```
 elem.removeEventListener(type, listener[, useCapture]) //type，事件类型，listener，事件回调
```

2.attachEvent的移除方式

```
ele.detachEvent(‘on’ + type, listener)
```

Ps:只有命名函数才可以解除绑定，当绑定的函数是匿名函数的时候，是没有办法解除绑定的

## 后记

这篇博客写到这就结束了，这篇主要是讲了一些比较基础的东西，学东西最忌讳的就是不求甚解，这篇虽然没有什么高深的知识点，但是可以说是小编把所有细节性的东西都展示出来了，希望对大家有所帮助