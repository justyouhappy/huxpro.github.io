---
layout:     post
title:      "常用数组方法和属性总结笔记"
subtitle:   " \"常用数组方法和属性总结笔记\""
date:       2017-07-18
author:     "Alan"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 前端
    - 技术
    - javascript
---

> live like youself. 


## 数组分类
数组一般分为稀疏数组以及密集数组。

#### 1.什么叫稀疏数组呢？

就是说数组两个值之间可以有空隙，为什么可以有空隙呢？你可以理解数组是一个特殊的对象，对应的键值为数组，也就是说键值对应的值不存在是允许的（注：不能理解值为undefined，此属性就是不存在的），所以数组是可以有缝隙的。

当你遍历它时,你会发现,它并没有元素.JavaScript会跳过这些缝隙.
```
let a = [1,2]
undefined
a[5] = 5 //  [1, 2, undefined, undefined,  undefined, 5]
a.map((c)=>{console.log(c)}) //1 ,2 ,5
```

#### 2.什么是密集数组呢？

和稀疏数组相反，数组每两个值之间是没有空隙的，我们通过一个方法来创建一个密集数组，来感受一下两者的区别。

````
let a =  Array(undefined, undefined, undefined);
a //[ undefined, undefined, undefined ]
````
但从表面上看,貌似这个数组和之前的稀疏数组并没有太多的区别:

````
a.length // 3
a[0] // undefined
````

现在我们再来遍历它
````
a.map((c)=>{console.log(c)}) // undefined undefined undefined
````

其实，实际上,JavaScript并没有常规的数组,所有的数组其实就是个对象,只不过会自动管理一些"数字"属性和length属性罢了，所以我们可以理解一下稀疏数组是因为相应的键值是不存在的，所以遍历时就被过滤了，而现在这种情况是因为相应的键值为undefined，所以如此声明的数组遍历时是存在的所以是可以遍历到的

---

## 数组属性

#### 1. length

   * length可以赋值
````
     var arr = [1, 2 ,3];
     arr.length = 5;
     arr // [1, 2, 3, undefined, undefined]
     arr.length = 2;
     arr // [1, 2];
````
   * 通过索引对 arr 的元素赋值会引起 arr 值得改变（正常情况），也可以超过范围赋值，就变成了稀疏数组
   ````
    var arr = [1, 2, 3];
    arr[2] = 5;
    arr // [1, 2, 5];
    var arr = [1, 2, 3];
    arr[4] = 9;
    arr // [1, 2, 3, undefined, 4];
   ````

#### 2. prototype 返回对象类型原型的引用 (主要作用：对数组进行扩展)

例: 向数组中添加 max 方法， 使得数组可以使用 min() 取得 最小值
```
 function min() {
    var ele = this[0];
     for(var i = 0; i < this.length-1; i++) {
        ele = this[i] < ele ? this[i] : ele;
     }
        return ele;
  }
   Array.prototype.min = min;
     [1,2,5,4,6].min() // 1
```
---

## 数组方法

查： indexOf, lastIndexOf
增： push, unshift, concat
删： pop, shift, slice
改： splice，reverse，sort，join
遍历方法：every some forEach map filter reduce

以下API的解释参考MDN

#### 1.indexof
```
arr.indexOf(searchElement[, fromIndex = 0])
```
方法返回在数组中可以找到一个给定元素searchElement的第一个索引，如果不存在，则返回-1
从数组的前面向前后查找。

如果给定 fromIndex ，就从fromIndex处开始，如果fromIndex大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参fromIndex是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的fromIndex是一个负值，仍然从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.

例：
```
let a = [2, 9, 7, 8, 9];
a.indexOf(2); // 0
a.indexOf(6); // -1
a.indexOf(7); // 2
a.indexOf(8); // 3
a.indexOf(9); // 1

if (a.indexOf(3) === -1) {
  a.push(3)
}
```
#### 2.lastIndexOf
```
arr.lastIndexOf(searchElement[, fromIndex = arr.length - 1])
```
返回指定元素searchElement在数组中的最后一个的索引，如果不存在则返回 -1。

从数组的后面向前查找。

如果给定 fromIndex ，就从fromIndex处开始逆向查找。默认为数组的长度减 1，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找

例：
```
var array = [2, 5, 9, 2];
var index = array.lastIndexOf(2);
// index is 3
index = array.lastIndexOf(7);
// index is -1
index = array.lastIndexOf(2, 3);
// index is 3
index = array.lastIndexOf(2, 2);
// index is 0
index = array.lastIndexOf(2, -2);
// index is 0
index = array.lastIndexOf(2, -1);
// index is 3
```

#### 3.push

将一个或多个元素添加到数组的末尾，并返回数组的新长度。

例：
```
var numbers = [1, 2, 3];
numbers.push(4);

console.log(numbers);
// [1, 2, 3, 4]

numbers.push(5, 6, 7);

console.log(numbers);
// [1, 2, 3, 4, 5, 6, 7]
```
#### 4.unshift

将一个或多个元素添加到数组的开头，并返回新数组的长度

例：
```
let a = [1, 2, 3];
a.unshift(4, 5);

console.log(a);
// [4, 5, 1, 2, 3]
```
#### 5.concat
用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组

例：
```
let arr1 = ["a", "b", "c"];
let arr2 = ["d", "e", "f"];

let arr3 = arr1.concat(arr2);

console.log(arr3);
// results in a new array
// [ "a", "b", "c", "d", "e", "f" ]

console.log(arr1);
// ["a", "b", "c"]

console.log(arr2);
// ["d", "e", "f”]
```
#### 6.pop
从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。

例：
```
let a = [1, 2, 3];
a.length; // 3
a.pop(); // 3
console.log(a); // [1, 2]
a.length; // 2
```
#### 7.shift()
从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。

例：
```
let a = [1, 2, 3];
let b = a.shift();

console.log(a);
// [2, 3]

console.log(b);
// 1
```
#### 8.slice
```
arr.slice(beg[,end])
```
返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象参数

beg

从该索引处开始提取，如果值为负数，会被作为arr.length+beg看待

end

可选参数，从该索引处结束提取，如果省略该参数，则默认arr.length，如果值为负数，会被作为arr.length+end看待

例如：
```
let a = [1, 2, 3, 4];
let b = a.slice(1, 3); 
console.log(a);// [1,2, 3,4]
console.log(b);// [2, 3,4]
```
#### 9.splice

修改删除添加一个简直不能再灵活的方法

```
splice (index, count, ele1, ele2 ….)
```
index 可以为负数，表示从队尾开始修改

 count 需要 删除 的数量， 为 0 表示不删除

ele1, ele2...... 可以向数组中添加的元素

例如：

```
var arr = [1, 2, 3, 4];
 arr.splice(1, 0, '1', '3');
 arr // [1, '1', '3', 2, 3, 4]
```
#### 10.reverse

颠倒数组中元素的位置，并返回该数组的引用。可以字符串方法split和配合，做反转字符串

#### 11.join() 

将数组（或一个类数组对象）的所有元素连接到一个字符串中,且不改变数组

例：
```
let a = ['Wind', 'Rain', 'Fire'];
a.join(); 
// 默认为 ","
// 'Wind,Rain,Fire'
a.join(""); 
// 分隔符 === 空字符串 ""
// "WindRainFire"
a.join("-"); 
// 分隔符 "-"
// 'Wind-Rain-Fire'

console.log(a);
// ['Wind', 'Rain', 'Fire’]
```

#### 12.every
```
arr.every(callback(currentValue, index, array)[, thisArg])测试数组的所有元素是否都通过了指定函数的测试
```
callback 用来测试每个元素的函数。

thisArg 可选，如果为 every 提供一个 thisArg 参数，在该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入 undefined。

注意：every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。

callback 被调用时传入三个参数：元素值，元素的索引，原数组。

every 不会改变原数组。

every可以理解为任意都要满足。

#### 13.some
```
arr.some(callback[, thisArg]) 
```
参数和every一样。

some 为数组中的每一个元素执行一次 callback 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，some 将会立即返回 true。否则，some 返回 false。

some 被调用时不会改变数组。

#### 14.forEach 
```
arr.forEach(callback (currentValue, index, array)[, thisArg]) 
```
为了为每个元素都执行添加执行某个函数，直接修改原数组

forEach 中的callback 有三个参数currentValue(当前值)，数组中正在处理的当前元素。
index(索引)，数组中正在处理的当前元素的索引。array，forEach()方法正在操作的数组。
thisArg，可选参数。当执行回调 函数时用作this的值(参考对象)

没有返回值

#### 15.map
```
arr.map(callback (currentValue, index, array)[, thisArg]) 
```
返回一个经过处理的新数组,不会破坏原来的数组

参数和forEach一致

#### 16.filter
```
arr.filter(callback[, thisObject]);
```
参数说明：
callback： 要对每个数组元素执行的回调函数。

thisObject ： 在执行回调函数时定义的this对象。

例：
```
//过滤掉小于 10 的数组元素：
function isBigEnough(element, index, array) {
    return (element >= 10);
}
var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
// 12, 130, 44
//结果：[12, 5, 8, 130, 44].filter(isBigEnough) ： 12, 130, 44 
```

功能说明：

对数组中的每个元素都执行一次指定的函数（callback），并且创建一个新的数组，该数组元素是所有回调函数执行时返回值为 true 的原数组元素。它只对数组中的非空元素执行指定的函数，没有赋值或者已经删除的元素将被忽略，同时，新创建的数组也不会包含这些元素。

回调函数可以有三个参数：当前元素，当前元素的索引和当前的数组对象。

如参数 thisObject 被传递进来，它将被当做回调函数（callback）内部的 this 对象，如果没有传递或者为null，那么将会使用全局对象。

filter 不会改变原有数组，记住：只有在回调函数执行前传入的数组元素才有效，在回调函数开始执行后才添加的元素将被忽略，而在回调函数开始执行到最后一个元素这一期间，数组元素被删除或者被更改的，将以回调函数访问到该元素的时间为准，被删除的元素将被忽略。


#### 17.reduce
```
arr.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)
```
方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值，返回函数累计处理的结果。

例子：
```
var total = [0, 1, 2, 3].reduce(function(sum, value) {
  return sum + value;
}, 0);
// total is 6
var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
  return a.concat(b);
}, []);
// flattened is [0, 1, 2, 3, 4, 5]
```
参数

callback

执行数组中每个值的函数，包含四个参数

accumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）

currentValue 数组中正在处理的元素

currentIndex 数据中正在处理的元素索引，如果提供了 initialValue ，从0开始；否则从1开始

array 调用 reduce 的数组

initialValue 可选项，其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错。

