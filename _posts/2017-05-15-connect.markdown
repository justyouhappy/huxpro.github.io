---
layout:     post
title:      "对connect使用总结"
subtitle:   "用于react+redux开发"
date:       2017-05-15
author:     "Alan"
header-img: "img/post-bg-rwd.jpg"
catalog: true
tags:
    - 前端
    - 技术
    - react
    - redux
---

> live like youself. 

在react+redux项目中有一个至关重要的API，它就是：connect(mapStateProps, mapDispatchToProps, mergeProps, options)
今天让我们来看一下我们如何使用此API，建议有一定的react+redux开发经验，但不是很明白connect的使用原理的开发者观看此文章

## mapStateProps(state, [ownProps]):

此函数将会监听store的变化，一旦发生变化，就会执行此函数，此回调函数，必须返回的是一个纯对象，此对象会与此组件的props合并，第一个参数state是当前store的状态，ownProps则指的是当前组件的props,当组件props属性被更新，此函数也会被调用

---

## mapDispatchToProps(dispatch, [ownProps])

dispatch:redux里的dispatch函数

ownProps:此参数为object or function:
1. 如果传递的是一个对象，那么该对象每个定义在该对象的函数，都被当作action creator，而且这个对象与Redux store绑定在一起，其中定义的方法名都作为属性名，合并到props中。
2. 如果是一个函数，则会接收一个dispatch函数，然后由你来决定返回什么对偶像，这个对象要通过dispatch与action creator连接起来，这样，当我们调用这个对象里的action creactor（相当于使用了redux-thunk后，直接在dispatch中传入action creactor的效果），就可以直接执行了，我们一般通过binActionCreators来将两者链接起来
3. 如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch会注入到你的组件 props 中。
4. 如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。

---

## [mergeProps(stateProps, dispatchProps, ownProps): props]:

一般我们可能不会使用mergeProps，官方详细解释如下：
[mergeProps(stateProps, dispatchProps, ownProps): props] (Function): 如果指定了这个参数，mapStateToProps() 与 mapDispatchToProps() 的执行结果和组件自身的 props 将传入到这个回调函数中。该回调函数返回的对象将作为 props 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 props 来筛选部分的 state 数据，或者把 props 中的某个特定变量与 action creator 绑定在一起。如果你省略这个参数，默认情况下返回 Object.assign({}, ownProps, stateProps,dispatchProps) 的结果。

---

## [options]: 此参数更加不常用，官方API如下：

[options] (Object) 如果指定这个参数，可以定制 connector 的行为。
* [pure = true] (Boolean): 如果为 true，connector 将执行 shouldComponentUpdate 并且浅对比 mergeProps 的结果，避免不必要的更新，前提是当前组件是一个“纯”组件，它不依赖于任何的输入或 state 而只依赖于 props 和 Redux store 的 state。默认值为 true。
* [withRef = false] (Boolean): 如果为 true，connector 会保存一个对被包装组件实例的引用，该引用通过 getWrappedInstance() 方法获得。默认值为 false。



