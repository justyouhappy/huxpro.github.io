---
layout:     post
title:      "let 和 const以及块级作用域"
subtitle:   " \"let 和 const以及块级作用域\""
date:       2017-07-17
author:     "Alan"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 前端
    - 技术
    - es6
---

> live like youself. 


## let 

#### 基本用法

ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。

例如：

```
{
    let a = 10;
    var b = 1;
}

a // ReferenceError: a is not defined.
b // 1
```

在代码块之外调用这两个变量，let声明的变量报错，var声明的变量返回了正确的值。

这表明，let声明的变量只在它所在的代码块有效。

当我们只希望一个变量在当前作用域生效，可以如此声明，这也避免了过去多人开发变量名互相影响的问题

此命令的出现，让我们巧妙了避免了闭包的尴尬

下面我们看一个例子

```
function returnA() {
    var a = [];
    for (var i = 0; i < 10; i++) {
      a[i] = function () {
      console.log(i);
     };
    }
    return a;
}
var A = returnA();
for (var i = 0; i < 10; i ++) {
    A[i]();
}

```
这样全部输出为10；
而当我们在for循环中使用let，便按照我们想要的结果输出了

```
function returnA() {
    let a = [];
    for (let i = 0; i < 10; i++) {
      a[i] = function () {
      console.log(i);
     };
    }
    return a;
}
var A = returnA();
for (let i = 0; i < 10; i ++) {
    A[i]();
}
```

为什么会这样呢？我们记不记得一点，let声明的变量只在当前代码块里生效，也就是每次声明a[i]函数时的i变量都不相同，也不会受外部作用域的影响，自然不能形成闭包了；

#### 不存在变量声明提升和不允许重复声明

需要注意的一点是，我们的let在当前作用域里并不会有变量声明提升
和var不同的地方就是，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错
另外也要注意我们在同一个作用域或者说代码块中，let是不允许重复声明变量的，也不能在函数内部里重新声明
让我们看一下两个错误的示范

```
// 报错
function () {
  let a = 10;
  var a = 1;
}

// 报错
function () {
  let a = 10;
  let a = 1;
}
function func(arg) {
  let arg; // 报错
}

function func(arg) {
  {
    let arg; // 不报错
  }
}
```

---

## const

#### 基本用法

声明一个只读的常量。一旦声明，常量的值就不能改变。

声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值.

const的作用域与let命令相同：只在声明所在的作用域或者代码块内有效
简而言之，const就是一个不能改变的let命令，注意：引用值可以修改，但不能重新赋值

#### 本质（需要注意）

const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。

---

## 块级作用域

ES5 只有全局作用域和函数作用域，没有块级作用域，这会带来很多不便，例如，内部变量可能会覆盖外层变量

ES6 的块级作用域

let实际上为 JavaScript 新增了块级作用域。

```
function f1() {
  let n = 5;
  if (true) {
    let n = 10;
  }
  console.log(n); // 5
}
```

上面的函数有两个代码块，都声明了变量n，运行后输出5。这表示外层代码块不受内层代码块的影响。如果两次都使用var定义变量n，最后输出的值才是10。

ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。
使得es5中规定函数只能在顶层作用域和函数作用域声明的规定和浏览器行为之间的差异解决了，也解决了由于函数声明变量提升导致的问题，下面我们看一个例子:
```
function f() { console.log('I am outside!'); }

(function () {
  if (false) {
    // 重复声明一次函数f
    function f() { console.log('I am inside!'); }
  }

  f();
}());
```
上面代码在 ES5 中运行，会得到“I am inside!”，因为在if内声明的函数f会被提升到函数头部

而在es6中就完全不一样了，理论上会得到“I am outside!”。因为块级作用域内声明的函数类似于let，对作用域之外没有影响。但是，如果你真的在 ES6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？
原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6在附录B里面规定，浏览器的实现可以不遵守上面的规定，有自己的行为方式。

* 允许在块级作用域内声明函数。
* 函数声明类似于var，即会提升到全局作用域或函数作用域的头部。
* 同时，函数声明还会提升到所在的块级作用域的头部。

注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作let处理。(如node)

根据这三条规则，在浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于var声明的变量。

```
// 浏览器的 ES6 环境
function f() { console.log('I am outside!'); }

(function () {
  if (false) {
    // 重复声明一次函数f
    function f() { console.log('I am inside!'); }
  }

  f();
}());
// Uncaught TypeError: f is not a function
```

上面的代码在符合 ES6 的浏览器中，都会报错，因为实际运行的是下面的代码。
```
// 浏览器的 ES6 环境
function f() { console.log('I am outside!'); }
(function () {
  var f = undefined;
  if (false) {
    function f() { console.log('I am inside!'); }
  }

  f();
}());
// Uncaught TypeError: f is not a function
```

考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。