---
layout:     post
title:      "git 基础使用总结（2）----分支与变基"
subtitle:   "git 基础"
date:       2017-07-17
author:     "Alan"
header-img: "img/post-bg-rwd.jpg"
catalog: true
tags:
    - 前端
    - git
---

> live like youself. 

# 分支

为什么要使用分支开发某个网站。

举个例子：

1.为实现某个新的需求，创建一个分支。
2.在这个分支上开展工作。
3.正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补。 你将按照如下方式来处理：
4.切换到你的线上分支（production branch）。
5.为这个紧急任务新建一个分支，并在其中修复它。
6.在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。
7.切换回你最初工作的分支上，继续工作。

具体方法

1.创建分支

```
    git branch 分支名

```
2.分支切换
```
   git checkout 分支名

```
3.创建分支并切换到此分支
```
   git checkout -b 分支名
```
4.合并分支
```
   git merge 要合并的分支名   // 注：合并的是此分支已提交至缓存区的内容，(git add 和git commit之后)
```
5.在任务追踪系统中关闭此项任务，并删除这个分支。
```
   git branch -d 分支名
```
6.出现冲突时，需要你手动解除冲突，再提交代码

   有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来Unmerged paths

7.查看当前所有分支
```
   git branch// 注：--merged 与 --no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。
```
8.删除远程分支
```
   git push origin —delete 分支名
```
9.拉取远程分支
```
    git pull 拉取当前本地分支在远程分支上的代码
```
---

## 变基

在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase
当前分支情况如下
![分支](/img/变基.png)
分支合并的最简单的方法就是merge命令，它会把两个分支最新快照以及二者的共同祖先进行三方合并，生成一个新的快照，并提交
第二种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。 在 Git 中，这种操作就叫做 变基。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样
```
git checkout experiment
git rebase master
```
这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。
如图：
![分支](/img/bianji2.png)
当我们拉取代码想进行合并时，又希望不会有多余的提交历史，我们该怎么做呢？
很简单，直接执行 
```
git pull --rebase
```
